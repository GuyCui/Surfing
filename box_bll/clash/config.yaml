# 锚点区
Proxy_first: &Proxy_first {type: select, proxies: [节点选择, 香港自动, 新加坡自动, 日本自动, 台湾自动, 美国自动, 全部节点, 全球直连]}

Direct_first: &Direct_first {type: select, proxies: [全球直连, 节点选择,  香港自动, 新加坡自动, 日本自动, 台湾自动, 美国自动, 全部节点]}

Ai_first: &Ai_first {type: url-test, proxies: [日本自动, 台湾自动, 美国自动], exclude-filter: "(?i)(🟢 直连)"}

Include_all: &Include_all {type: select, proxies: [节点选择, 香港自动, 新加坡自动, 日本自动, 台湾自动, 美国自动, 全部节点, 全球直连], include-all: true, exclude-filter: "(?i)(🟢 直连)"}

PProviders: &PProviders {type: http, interval: 86400, health-check: {enable: true, url: 'https://www.apple.com/library/test/success.html', interval: 300, timeout: 3000, lazy: true}, filter: '^(?!.*(拒绝|直连|群|邀请|返利|循环|官网|客服|网站|网址|获取|订阅|流量|到期|机场|下次|版本|官址|备用|过期|已用|联系|邮箱|工单|贩卖|通知|倒卖|防止|国内|地址|频道|无法|说明|提示|特别|访问|支持|教程|关注|更新|作者|加入|USE|USED|TOTAL|EXPIRE|EMAIL|Panel|Channel|Author|traffic))'}

# 延迟检测 URL
p: &p
  type: http
  interval: 3600 # 更新provider的时间
  size-limit: 0 # 限制下载文件的最大大小，默认为 0 即不限制文件大小，单位为字节 (b)
  header: # 自定义 http 请求头
    User-Agent:
      - meta;clash.meta;Clash/v1.18.0;clash;mihomo
  health-check: # 健康检查 (延迟测试)
    enable: true
    url: https://www.gstatic.com/generate_204 # 健康检查测试地址
    interval: 300 # 健康检查间隔
    timeout: 3000 # 健康检查超时时间
    lazy: true # 懒惰状态

override: &override
  tfo: false # 启用 TCP Fast Open, 仅生效于 TCP 协议
  mptcp: false # 启用 TCP Multi Path, 仅生效于 TCP 协议
  udp: true # 是否允许 UDP 通过代理，默认为 false
  udp-over-tcp: false # 启用 UDP over TCP，默认 false
  skip-cert-verify: true # 跳过证书验证，仅适用于使用 tls 的协议
  ip-version: ipv4-prefer # 可选：dual/ipv4/ipv6/ipv4-prefer/ipv6-prefer ,默认使用 dual, ipv4: 仅使用 IPv4, ipv6: 仅使用 IPv6, ipv4-prefer: 优先使用 IPv4，对于 TCP 会进行双栈解析，并发链接但是优先使用 IPv4 链接，UDP 则为双栈解析，获取结果中的第一个 IPv4, ipv6-prefer:优先使用 IPv6，对于 TCP 会进行双栈解析，并发链接但是优先使用 IPv6 链接，UDP 则为双栈解析，获取结果中的第一个 IPv6
# URL 测试配置

u: &u
  type: url-test # 测试类型
  tolerance: 1 # 自动选择切换容差
  strategy: consistent-hashing # 负载均衡策略
  url: https://www.gstatic.com/generate_204 #健康检查测试地址
  interval: 300 #健康检查间隔，如不为 0 则启用定时测试，单位为秒
  lazy: true # 懒惰状态
  timeout: 3000 # 健康检查超时时间，单位为毫秒
  max-failed-times: 5 # 最大失败次数，超过则触发一次强制健康检查，默认 5
  include-all-providers: true # 引入所有代理集合

##############################################
# 机场订阅，Airport_01
proxy-providers:
  Airport_01:
    <<: *PProviders
    proxy: "🟢 直连"
    url: "http://127.0.0.1:3008/T3B9dgzBzdRbBF8Aqx7P/download/collection/all"
    path: ./proxies/1.主要地址.yaml
    override:
      <<: *override
      additional-prefix: 'Main：'

##############################################


# 用于下载订阅时指定UA
global-ua: clash.meta

# 全局配置
# HTTP/SOCKS 混合代理端口
mixed-port: 7891
ipv6: true
# 工作模式为规则模式
mode: rule
allow-lan: true
# 绑定地址，默认为所有 IP 地址
bind-address: "*"
unified-delay: true
tcp-concurrent: true
# interface-name: eth0  （路由器下根据情况指定出站接口）
authentication:
#  密码设置选项默认无
- "guy:Guy!23"
skip-auth-prefixes:
- 127.0.0.1/8
- 192.168.2.0/24
- ::1/128

geodata-mode: false
# GeoSite 使用的匹配器实现
geosite-matcher: succinct
# GEO 文件加载模式（standard：标准加载器/memconservative：专为内存受限 (小内存) 设备优化的加载器 (默认值)）
geodata-loader: standard
geo-auto-update: true
geo-update-interval: 48
geox-url:
  geosite: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://github.com/Hackl0us/GeoIP2-CN/raw/release/Country.mmdb"
  geoip: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
  asn: "https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/GeoLite2-ASN.mmdb"

# 控制面板
external-controller: 0.0.0.0:9093
secret: "Guy!23"
#  密码设置选项默认无
external-ui: ui
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: random
keep-alive-idle: 600
keep-alive-interval: 30

# 实验性功能配置
experimental:
  quic-go-disable-gso: true # 禁用 QUIC 协议中的 GSO (Generic Segmentation Offload) 功能
  quic-go-disable-ecn: true #禁用ECN
  dialer-ip4p-convert: false # 启用IP4P地址转换

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: false

# 流量嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "*.v2ex.com"
  skip-domain:
    - "Mijia Cloud"
    - "dlg.io.mi.com"
    - "*.push.apple.com"
    - "*.apple.com"
    - "*.wechat.com"
    - "*.qpic.cn"
    - "*.qq.com"
    - "*.wechatapp.com"
    - "*.vivox.com"
    - "*.cuihome.com"
    # 向日葵服务
    - "*.oray.com"
    - "*.sunlogin.net"

# 代理模式
tun:
  exclude-package: []
  enable: true
  device: Meta
  inet6-address:
  stack: gvisor
  mtu: 1500
  gso: true # 通用分段卸载 (GSO)，提高网络性能
  gso-max-size: 65536 # 设置 GSO 最大分段大小为 65536 字节
  udp-timeout: 300 # 设置 UDP 超时时间为 300 秒，优化 NAT 映射
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  # 自动根据流量选择最佳路由
  auto-route: true
  # 强制使用严格路由，避免流量被错误路由
  strict-route: true
  # 自动重定向不匹配规则的流量
  auto-redirect: true
  # 自动检测并使用适当的网络接口
  auto-detect-interface: true
  endpoint-independent-nat: false

# DNS模块
dns:
  enable: true
  # 缓存算法，参数:lru 最近最少使用，arc 自适应替换缓存
  cache-algorithm: arc
  listen: 0.0.0.0:53
  ipv6: true
  # 是否开启 DoH 支持 HTTP/3，将并发尝试
  prefer-h3: false
  # 使用系统的 hosts 文件条目
  use-system-hosts: true
  # dns 连接遵守路由规则，需配置 proxy-server-nameserver, 强烈不建议和 prefer-h3 一起使用
  respect-rules: true
  # 模式切换 redir-host / fake-ip
  enhanced-mode: fake-ip
  # fake-ip 池设置
  fake-ip-range: 28.0.0.1/8
  # 模式切换 whitelist/blacklist
  # 黑名单模式表示如果匹配成功则不返回 Fake-IP, 白名单模式时只有匹配成功才返回 Fake-IP
  fake-ip-filter-mode: blacklist
  # 是否遵循 nameserver-policy，默认为不遵守，仅当 direct-nameserver 不为空时生效
  direct-nameserver-follow-policy: true
  fake-ip-filter:
    - "rule-set:fakeip_filter_domain,game_cn_domain,bank_cn_domain,wechat_domain,ai_cn_domain,NetEaseMusic_domain,fcm_domain,alibaba_domain,fcm_domain,media_cn_domain,xiaomi_domain,steam_cn_domain,pt_cn_domain,public-tracker_domain,115_domain,aliyun_domain,direct_domain,apple_cn_domain,apple_firmware_domain,iptv_domain,private_domain,cn_domain,fakeip-filter"
    - '+.cuihome.com'

  nameserver-policy:
    github.akams.cn:
      - "quic://223.5.5.5"
      - "quic://223.6.6.6"
    "+.jp":
      - "https://public.dns.iij.jp/dns-query#h3=true" # IIJ （日本） DNS over H3
    "+.hk":
      - "quic://dns.nextdns.io" # NextDNS（香港） DNS over DOQ
    "+.eu":
      - "quic://dns0.eu" # 公共（欧洲） DNS over DOQ
    "RULE-SET:Private,China":
      - "quic://223.5.5.5" # 阿里 DNS over DOQ
      - "quic://223.6.6.6"

  nameserver:
    - "https://1.1.1.1/dns-query#h3=true" # Cloudflare DNS over H3
    - "https://1.0.0.1/dns-query#h3=true"
    - "https://8.8.8.8/dns-query#h3=true" # Google DNS over H3
    - "https://8.8.4.4/dns-query#h3=true"
    - "quic://94.140.15.15" # AdGuard DNS over DOQ
    - "quic://94.140.14.140"
  proxy-server-nameserver: # 代理节点域名解析服务器，仅用于解析代理节点的域名
    - "quic://223.5.5.5" # 阿里 DNS over DOQ
    - "quic://223.6.6.6"
  direct-nameserver: #  用于直连出口域名解析的 DNS 服务器
    - "quic://223.5.5.5" # 阿里 DNS over DOQ
    - "quic://223.6.6.6"

proxies:
  - name: "🟢 直连"
    type: direct
    udp: true


# 策略组
proxy-groups:
  - {name: 节点选择, <<: *u, proxies: [香港自动, 新加坡自动, 日本自动, 台湾自动, 美国自动, 全部节点, 故障转移], icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/select.png"}
# 功能型代理组默认隐藏 start
  - {name: 🔗 代理, type: select, hidden: true, proxies: [节点选择]}
  - {name: 🚫 拒绝, type: select, hidden: true, proxies: [REJECT]}
  - {name: ⚪ 丢弃, type: select, hidden: true, proxies: [REJECT-DROP]}
# over
  - {name: AI, <<: *Ai_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/ai.png"}
  - {name: GitHub, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/github.png"}
  - {name: YouTube, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/youtube.png"}
  - {name: FCM, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/fcm.png"}
  - {name: GoogleVPN, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/googlevpn.png"}
  - {name: Google, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/google.png"}
  - {name: Meta, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/meta.png"}
  - {name: OneDrive, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/onedrive.png"}
  - {name: Microsoft, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/microsoft.png"}
  - {name: Telegram, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/telegram.png"}
  - {name: Discord, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/discord.png"}
  - {name: TikTok, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/tiktok.png"}
  - {name: NETFLIX, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/netfix.png"}
  - {name: AppleTV, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/appletv.png"}
  - {name: Apple, type: select, <<: *Direct_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/apple.png"}
  - {name: Emby,type: select, <<: *Include_all, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/emby.png"}
  - {name: 哔哩哔哩, type: select, <<: *Direct_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/bilibili.png"}
  - {name: 哔哩东南亚, type: select, proxies: [节点选择, 新加坡自动, 全部节点, 全球直连], icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/bilibilit.png"}
  - {name: Spotify, <<: *Proxy_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/spotify.png"}
  - {name: 国内媒体, type: select, <<: *Direct_first, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/Chinese_media.png"}
  - {name: Global-TV,type: select, <<: *Include_all, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/global_tv.png"}
  - {name: Global-Medial,type: select, <<: *Include_all, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/global_media.png"}
  - {name: Speedtest,type: select, <<: *Include_all, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/speedtest.png"}
  - {name: STEAM,type: select, <<: *Include_all, icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/steam.png"}
  - {name: 全球直连, type: select, proxies: [🟢 直连, 🔗 代理], icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/direct.png"}
  - {name: 隐私拦截, type: select, proxies: [🚫 拒绝, ⚪ 丢弃 ,🟢 直连, 🔗 代理], icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/block.png"}
  - {name: Final, type: select, <<: *Include_all,  icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/final.png"}
  - {name: 香港自动, <<: *u, hidden: true, proxies: [香港均衡], filter: "(?i)(香港|hk|hongkong|Hong Kong)" ,exclude-filter: "(?i)(The_HK_automation|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|traffic|plus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/automation2.png"}
  - {name: 新加坡自动, <<: *u, hidden: true, proxies: [新加坡均衡], filter: "(?i)(新|🇸🇬|SG|Singapore)" ,exclude-filter: "(?i)(The_SG_automation|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|traffic|plus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/automation2.png"}
  - {name: 日本自动, <<: *u, hidden: true, proxies: [日本均衡], filter: "(?i)(日本|🇯🇵|JP|Japan)" ,exclude-filter: "(?i)(The_JP_automation|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|traffic|plus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/automation2.png"}
  - {name: 台湾自动, <<: *u, hidden: true, proxies: [台湾均衡], filter: "(?i)(台|🇹🇼|TW|Taiwan)" ,exclude-filter: "(?i)(The_TW_automation|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|traffic|plus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/automation2.png"}
  - {name: 美国自动, <<: *u, hidden: true, proxies: [美国均衡], filter: "(?i)(美|🇺🇲|US|America|united States)" ,exclude-filter: "(?i)(The_US_automation|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|russia|austria|plus|traffic|Australia|rus|aus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/automation2.png"}
  - {name: 香港均衡, type: load-balance, <<: *u, hidden: true, filter: "(?i)(香港|hk|hongkong|Hong Kong)" ,exclude-filter: "(?i)(The_HK_balance|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|traffic|plus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/load-balance.png"}
  - {name: 新加坡均衡, type: load-balance, <<: *u, hidden: true, filter: "(?i)(新|🇸🇬|SG|Singapore)" ,exclude-filter: "(?i)(The_SG_balance|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|traffic|plus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/load-balance.png"}
  - {name: 日本均衡, type: load-balance, <<: *u, hidden: true, filter: "(?i)(日本|🇯🇵|JP|Japan)" ,exclude-filter: "(?i)(The_JP_balance|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|traffic|plus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/load-balance.png"}
  - {name: 台湾均衡, type: load-balance, <<: *u, hidden: true, filter: "(?i)(台|🇹🇼|TW|Taiwan)" ,exclude-filter: "(?i)(The_TW_balance|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|traffic|plus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/load-balance.png"}
  - {name: 美国均衡, type: load-balance, <<: *u, hidden: true, filter: "(?i)(美|🇺🇲|US|America|united States)" ,exclude-filter: "(?i)(The_US_balance|wcloud|0倍|0\\.1倍|0\\.01倍|0\\.3X|0\\.2x|0\\.5x|3X|2x|1\\.5x|russia|austria|plus|traffic|Australia|rus|aus)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/load-balance.png"}
  - {name: 故障转移, type: fallback, <<: *u, proxies: [香港自动, 新加坡自动, 日本自动, 台湾自动, 美国自动], interval: 300, exclude-filter: "(?i)(🟢 直连)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/fallback.png"}
  - {name: 全部节点, type: select, tolerance: 20, <<: *u, exclude-filter: "(?i)(🟢 直连)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/all.png"}
  - {name: GLOBAL, type: select, include-all: true, proxies: [节点选择, YouTube, GoogleVPN, FCM, Google, Meta, AI, GitHub, OneDrive, Microsoft, Telegram, Discord, TikTok, NETFLIX, AppleTV, Apple, Emby, 哔哩哔哩, 哔哩东南亚, Spotify, 国内媒体, Global-TV, Global-Medial, Speedtest, STEAM, 全球直连, 隐私拦截, Final, 香港自动, 新加坡自动, 日本自动, 台湾自动, 美国自动, 香港均衡, 新加坡均衡, 日本均衡, 台湾均衡, 美国均衡, 故障转移, 全部节点], exclude-filter: "(?i)(🟢 直连)", icon: "https://pub-8feead0908f649a8b94397f152fb9cba.r2.dev/global.png"}
rules:
  - RULE-SET,banAd_domain,隐私拦截
  - RULE-SET,wechat_domain,全球直连
  - RULE-SET,fakeip-filter,全球直连
  - RULE-SET,wechat_asn,全球直连,no-resolve
  - RULE-SET,speedtest_domain,Speedtest
  - RULE-SET,Cloudflare_domain,节点选择
  - RULE-SET,proxy_domain,节点选择
  - RULE-SET,ai!cn_domain,AI
  - RULE-SET,ai_domain,AI
  - RULE-SET,openai_domain,AI
  - RULE-SET,biliintl_domain,哔哩东南亚
  - RULE-SET,bilibili_domain,哔哩哔哩
  - RULE-SET,XPTV,国内媒体
  - RULE-SET,XPTV_IP,国内媒体,no-resolve
  - RULE-SET,bilibili_ip,哔哩哔哩,no-resolve
  - RULE-SET,bank_cn_domain,全球直连
  - RULE-SET,ai_cn_domain,全球直连
  - RULE-SET,direct_domain,全球直连
  - RULE-SET,alibaba_domain,全球直连
  - RULE-SET,115_domain,全球直连
  - RULE-SET,aliyun_domain,全球直连
  - RULE-SET,github_domain,GitHub
  - RULE-SET,gitbook_domain,GitHub
  - RULE-SET,googlevpn_domain,GoogleVPN
  - RULE-SET,youtube_domain,YouTube
  - RULE-SET,fcm_domain,FCM
  - RULE-SET,PikPak,Google
  - RULE-SET,google_domain,Google
  - RULE-SET,google_asn_cn,Google,no-resolve
  - RULE-SET,google_ip,Google,no-resolve
  - RULE-SET,onedrive_domain,OneDrive
  - RULE-SET,microsoft_domain,Microsoft
  - RULE-SET,telegram_domain,Telegram
  - RULE-SET,telegram_ip,Telegram,no-resolve
  - RULE-SET,discord_domain,Discord
  - RULE-SET,discord_asn,Discord,no-resolve
  - RULE-SET,iptv_domain,全球直连
  - RULE-SET,private_domain,全球直连
  - RULE-SET,xiaomi_domain,全球直连
  - RULE-SET,steam_cn_domain,全球直连
  - RULE-SET,steamcdn_domain,全球直连
  - RULE-SET,steamcdn_ip,全球直连,no-resolve
  - RULE-SET,NetEaseMusic_domain,全球直连
  - RULE-SET,NetEaseMusic_ip,全球直连,no-resolve
  - RULE-SET,pt_cn_domain,全球直连
  - RULE-SET,public-tracker_domain,全球直连
  - RULE-SET,media_cn_domain,国内媒体
  - RULE-SET,appleTV_domain,AppleTV
  - RULE-SET,apple_cn_domain,全球直连
  - RULE-SET,Private,全球直连
  - RULE-SET,China,全球直连
  - RULE-SET,apple_firmware_domain,Apple
  - RULE-SET,apple_domain,Apple
  - RULE-SET,TestFlight,Apple
  - RULE-SET,tiktok_domain,TikTok
  - RULE-SET,netflix_domain,NETFLIX
  - RULE-SET,netflix_ip,NETFLIX,no-resolve
  - RULE-SET,emby_domain,Emby
  - RULE-SET,emby_ip,Emby,no-resolve
  - RULE-SET,spotify_domain,Spotify
  - RULE-SET,facebook_domain,Meta
  - RULE-SET,whatsapp_domain,Meta
  - RULE-SET,instagram_domain,Meta
  - RULE-SET,threads_domain,Meta
  - RULE-SET,meta_domain,Meta
  - RULE-SET,facebook_ip,Meta,no-resolve
  - RULE-SET,twitch_domain,Global-TV
  - RULE-SET,porn_domain,Global-TV
  - RULE-SET,TVB_domain,Global-TV
  - RULE-SET,media!cn_domain,Global-Medial
  - RULE-SET,twitter_ip,节点选择,no-resolve
  - RULE-SET,steam_domain,STEAM
  - RULE-SET,ifast_domain,全球直连
  - RULE-SET,gfw_domain,节点选择
  - RULE-SET,geolocation-!cn,节点选择
  - RULE-SET,cn_domain,全球直连
  - RULE-SET,private_ip,全球直连,no-resolve
  - RULE-SET,cn_ip,全球直连,no-resolve
  - MATCH,Final
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  ip_text: &ip_text {type: http, interval: 86400, behavior: ipcidr, format: text}
  ip_yaml: &ip_yaml {type: http, interval: 86400, behavior: ipcidr, format: yaml}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  domain_text: &domain_text {type: http, interval: 86400, behavior: domain, format: text}
  domain_yaml: &domain_yaml {type: http, interval: 86400, behavior: domain, format: yaml}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
  class_yaml: &class_yaml {type: http, interval: 86400, behavior: classical, format: yaml}
rule-providers:
  TestFlight:
    <<: *domain
    url: "https://github.com/GuyCui/Surfing/raw/refs/heads/main/box_bll/clash/rules/TestFlight.mrs"
    path: ./rules/TestFlight.mrs
  XPTV:
    <<: *domain
    url: "https://github.com/GuyCui/Surfing/raw/refs/heads/main/box_bll/clash/rules/XPTV.mrs"
    path: ./rules/XPTV.mrs
  XPTV_IP:
    <<: *ip
    url: "https://github.com/GuyCui/Surfing/raw/refs/heads/main/box_bll/clash/rules/XPTV_IP.mrs"
    path: ./rules/XPTV_IP.mrs
  fakeip-filter: { <<: *domain, path: ./rules/fakeip-filter.mrs, url: "https://github.com/DustinWin/ruleset_geodata/releases/download/mihomo-ruleset/fakeip-filter.mrs" }
  PikPak:
    <<: *domain
    url: "https://github.com/GuyCui/Surfing/raw/refs/heads/main/box_bll/clash/rules/PikPak.mrs"
    path: ./rules/PikPak.mrs
  banAd_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/banAd.mrs", path: ./rules/banAd.mrs }
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs", path: ./rules/private.mrs }
  bank_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-bank-cn.mrs", path: ./rules/category-bank-cn.mrs }
  xiaomi_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/xiaomi.mrs", path: ./rules/xiaomi.mrs }
  biliintl_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/bilibili%40!cn.mrs", path: ./rules/bilibili@!cn.mrs }
  bilibili_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/bilibili.mrs", path: ./rules/bilibili.mrs }
  spotify_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/spotify.mrs", path: ./rules/spotify.mrs }
  steam_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/steam%40cn.mrs", path: ./rules/steam@cn.mrs }
  steamcdn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/Steam-domain.mrs", path: ./rules/Steam-domain.mrs }
  steam_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/steam.mrs", path: ./rules/steam.mrs }
  ai!cn_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs", path: ./rules/category-ai-!cn.mrs }
  openai_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/openai.mrs", path: ./rules/openai.mrs }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs", path: ./rules/youtube.mrs }
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/google.mrs", path: ./rules/google.mrs }
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs", path: ./rules/github.mrs }
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs", path: ./rules/telegram.mrs }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs", path: ./rules/netflix.mrs }
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs", path: ./rules/onedrive.mrs }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs", path: ./rules/microsoft.mrs }
  apple_firmware_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/applefirmware.mrs", path: ./rules/applefirmware.mrs }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs", path: ./rules/apple.mrs }
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs", path: ./rules/ookla-speedtest.mrs }
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs", path: ./rules/tiktok.mrs }
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs", path: ./rules/gfw.mrs }
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs", path: ./rules/geolocation-!cn.mrs }
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs", path: ./rules/cn.mrs }
  media_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-media-cn.mrs", path: ./rules/category-media-cn.mrs }
  media!cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-social-media-!cn.mrs", path: ./rules/category-social-media-!cn.mrs }
  Cloudflare_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/cloudflare.mrs", path: ./rules/cloudflare.mrs }
  gitbook_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/gitbook.mrs", path: ./rules/gitbook.mrs }
  NetEaseMusic_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/NetEaseMusic-domain.mrs", path: ./rules/NetEaseMusic-domain.mrs }
  appleTV_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/appletv.mrs", path: ./rules/appletv.mrs }
  facebook_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/facebook.mrs", path: ./rules/facebook.mrs }
  whatsapp_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/whatsapp.mrs", path: ./rules/whatsapp.mrs }
  instagram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/instagram.mrs", path: ./rules/instagram.mrs }
  threads_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/threads.mrs", path: ./rules/threads.mrs }
  meta_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/meta.mrs", path: ./rules/meta.mrs }
  ifast_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/ifast.mrs", path: ./rules/ifast.mrs }
  wechat_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/WeChat.mrs", path: ./rules/WeChat.mrs }
  proxy_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/proxy.mrs", path: ./rules/proxy.mrs }
  direct_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/direct.mrs", path: ./rules/direct.mrs }
  apple_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/apple%40cn.mrs", path: ./rules/apple@cn.mrs }
  alibaba_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/alibaba.mrs", path: ./rules/alibaba.mrs }
  ai_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-ai-cn.mrs", path: ./rules/category-ai-cn.mrs }
  discord_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/discord.mrs", path: ./rules/discord.mrs }
  fcm_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/googlefcm.mrs", path: ./rules/googlefcm.mrs }
  emby_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/emby.mrs", path: ./rules/emby.mrs }
  pt_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-pt.mrs", path: ./rules/category-pt.mrs }
  public-tracker_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-public-tracker.mrs", path: ./rules/category-public-tracker.mrs }
  115_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/115.mrs", path: ./rules/115.mrs }
  aliyun_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/aliyun.mrs", path: ./rules/aliyun.mrs }
  twitch_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/twitch.mrs", path: ./rules/twitch.mrs }
  porn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-porn.mrs", path: ./rules/category-porn.mrs }
  iptv_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/iptv.mrs", path: ./rules/iptv.mrs }
  googlevpn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/googleVPN.mrs", path: ./rules/googleVPN.mrs }
  ai_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/ai.mrs", path: ./rules/ai.mrs }
  TVB_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/tvb.mrs", path: ./rules/tvb.mrs }
  game_cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/category-games%40cn.mrs", path: ./rules/category-games@cn.mrs }
  fakeip_filter_domain: { <<: *domain, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/Domain/fakeip-filter.mrs", path: ./rules/fakeip-filter.mrs }

  bilibili_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo-lite/geoip/bilibili.mrs", path: ./rules/bilibili-ip.mrs }
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs", path: ./rules/cn-ip.mrs }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs", path: ./rules/google-ip.mrs }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs", path: ./rules/telegram-ip.mrs }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs", path: ./rules/netflix-ip.mrs }
  facebook_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/facebook.mrs", path: ./rules/facebook-ip.mrs }
  twitter_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/twitter.mrs", path: ./rules/twitter-ip.mrs }
  private_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geoip/private.mrs", path: ./rules/private-ip.mrs }
  steamcdn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/IP/steamCDN-ip.mrs", path: ./rules/steamCDN-ip.mrs }
  NetEaseMusic_ip: { <<: *ip, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/IP/NetEaseMusic-ip.mrs", path: ./rules/NetEaseMusic-ip.mrs }
  emby_ip: { <<: *ip, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/IP/emby-ip.mrs", path: ./rules/emby-ip.mrs }

  google_asn_cn: { <<: *ip, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/IP/AS24424.mrs", path: ./rules/AS24424.mrs }
  discord_asn: { <<: *ip, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/IP/AS49544.mrs", path: ./rules/AS49544.mrs }
  wechat_asn: { <<: *ip, url: "https://raw.githubusercontent.com/Lanlan13-14/Rules/refs/heads/main/rules/IP/AS132203.mrs", path: ./rules/AS132203.mrs }

  Private:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"
    path: ./rules/private.mrs
  China:
    <<: *domain
    url: "https://raw.githubusercontent.com/Kwisma/clash-rules/release/direct.mrs"
    path: ./rules/direct.mrs